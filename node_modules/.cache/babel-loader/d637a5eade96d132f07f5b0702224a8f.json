{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport * as React from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport { virtualize } from 'react-swipeable-views-utils';\nimport classnames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport * as DateUtil from './date';\nvar VirtualizedSwipeableViews = virtualize(SwipeableViews);\n\nvar styles = function (theme) {\n  return {\n    calendarContainer: {\n      position: 'relative',\n      maxWidth: '100%',\n      width: 48 * 7 + 'px',\n      overflow: 'hidden'\n    },\n    calendarControl: {\n      position: 'absolute',\n      width: '100%',\n      pointerEvents: 'none',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      zIndex: 100\n    },\n    calendarControlButton: {\n      pointerEvents: 'all'\n    },\n    calendarControlMonth: {\n      display: 'flex',\n      height: '48px',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    calendarMonthTitle: {\n      fontSize: '1rem',\n      fontWeight: 500,\n      textTransform: 'none'\n    },\n    years: {\n      height: '48px',\n      display: 'flex',\n      justifyContent: 'space-around',\n      alignItems: 'center'\n    },\n    invalidInput: {\n      color: theme.palette.text.disabled\n    },\n    week: {\n      display: 'flex'\n    },\n    labelWeekDay: {\n      height: '48px',\n      width: '48px',\n      color: theme.palette.text.hint,\n      fontWeight: 300,\n      lineHeight: '48px',\n      textAlign: 'center'\n    },\n    weekDay: {\n      flex: '1 1 auto',\n      width: '38px',\n      margin: '5px'\n    },\n    weekDayResponse: {\n      maxHeight: 'calc(((100vw - 64px) / 7) - 10px)'\n    },\n    day: {\n      padding: 0,\n      transition: theme.transitions.create('background-color')\n    },\n    selectedDay: {\n      backgroundColor: theme.palette.primary.dark,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.main\n      }\n    },\n    dayText: {\n      transition: theme.transitions.create('color')\n    },\n    selectedDayText: {\n      color: theme.palette.primary.contrastText\n    },\n    okToConfirmRow: {\n      height: '48px',\n      padding: '0 6px',\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center'\n    }\n  };\n};\n\nvar Calendar =\n/** @class */\nfunction (_super) {\n  __extends(Calendar, _super);\n\n  function Calendar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.updateHeight = {\n      month: undefined,\n      year: undefined\n    };\n\n    _this.getButtonHeight = function () {\n      var view = _this.container ? _this.container.getBoundingClientRect().width : 336;\n      return view / 7;\n    };\n\n    _this.resize = function () {\n      if (_this.updateHeight.month) {\n        _this.setState({\n          buttonHeight: _this.getButtonHeight()\n        }, _this.updateHeight.month);\n      }\n\n      if (_this.updateHeight.year) {\n        _this.setState({\n          buttonHeight: _this.getButtonHeight()\n        }, _this.updateHeight.year);\n      }\n    };\n\n    _this.selectDate = function (date, event) {\n      var _a = _this.props,\n          onChange = _a.onChange,\n          closeCalendar = _a.closeCalendar,\n          okToConfirm = _a.okToConfirm;\n\n      if (okToConfirm) {\n        _this.setState({\n          selected: date\n        });\n      } else {\n        closeCalendar();\n        onChange(date, event);\n      }\n    };\n\n    _this.confirmDate = function (event) {\n      var _a = _this.props,\n          onChange = _a.onChange,\n          closeCalendar = _a.closeCalendar,\n          okToConfirm = _a.okToConfirm;\n\n      if (okToConfirm) {\n        closeCalendar();\n        onChange(_this.state.selected, event);\n      }\n    };\n\n    _this.showYearsCalendar = function () {\n      var year = _this.state.year;\n\n      _this.setState({\n        mode: 'year',\n        yearIndex: Math.floor(year / 18)\n      });\n    };\n\n    _this.selectCalendarYear = function (year) {\n      var _a = _this.props,\n          min = _a.min,\n          max = _a.max,\n          onUpdateSize = _a.onUpdateSize;\n      var month = _this.state.month;\n\n      if (year) {\n        _this.setState({\n          mode: 'month',\n          year: year,\n          month: min && month < min.getMonth() && year === min.getFullYear() ? min.getMonth() : max && month > max.getMonth() && year === max.getFullYear() ? max.getMonth() : month\n        }, onUpdateSize);\n      } else {\n        _this.setState({\n          mode: 'month'\n        }, onUpdateSize);\n      }\n    };\n\n    _this.previousYearsValid = function () {\n      var min = _this.props.min;\n      var yearIndex = _this.state.yearIndex;\n      return yearIndex >= 1 && (min === undefined || yearIndex >= Math.ceil(min.getFullYear() / 18));\n    };\n\n    _this.previousYears = function () {\n      var min = _this.props.min;\n      var yearIndex = _this.state.yearIndex;\n\n      _this.setState({\n        yearIndex: yearIndex - 1\n      });\n    };\n\n    _this.nextYearsValid = function () {\n      var max = _this.props.max;\n      var yearIndex = _this.state.yearIndex;\n      return max === undefined || yearIndex < Math.floor(max.getFullYear() / 18);\n    };\n\n    _this.nextYears = function () {\n      var yearIndex = _this.state.yearIndex;\n\n      _this.setState({\n        yearIndex: yearIndex + 1\n      });\n    };\n\n    _this.changeYears = function (index) {\n      _this.setState({\n        yearIndex: index\n      });\n    };\n\n    _this.yearInvalid = function (currentYear) {\n      var _a = _this.props,\n          min = _a.min,\n          max = _a.max;\n      var _b = _this.state,\n          month = _b.month,\n          year = _b.year;\n      return min && currentYear < min.getFullYear() || max && currentYear > max.getFullYear() || year === currentYear;\n    };\n\n    _this.previousMonthValid = function () {\n      var min = _this.props.min;\n      var _a = _this.state,\n          month = _a.month,\n          year = _a.year;\n      return min === undefined || month > min.getMonth() || year > min.getFullYear();\n    };\n\n    _this.previousMonth = function () {\n      var onUpdateSize = _this.props.onUpdateSize;\n      var _a = _this.state,\n          month = _a.month,\n          year = _a.year;\n\n      _this.setState({\n        year: year - (month <= 0 ? 1 : 0),\n        month: month <= 0 ? 11 : month - 1\n      }, onUpdateSize);\n    };\n\n    _this.nextMonthValid = function () {\n      var max = _this.props.max;\n      var _a = _this.state,\n          month = _a.month,\n          year = _a.year;\n      return max === undefined || month < max.getMonth() || year < max.getFullYear();\n    };\n\n    _this.nextMonth = function () {\n      var onUpdateSize = _this.props.onUpdateSize;\n      var _a = _this.state,\n          month = _a.month,\n          year = _a.year;\n\n      _this.setState({\n        year: year + (month >= 11 ? 1 : 0),\n        month: month >= 11 ? 0 : month + 1\n      }, onUpdateSize);\n    };\n\n    _this.changeMonth = function (index) {\n      var onUpdateSize = _this.props.onUpdateSize;\n\n      _this.setState({\n        year: Math.floor(index / 12),\n        month: index % 12\n      }, onUpdateSize);\n    };\n\n    _this.dayInvalid = function (date) {\n      var _a = _this.props,\n          value = _a.value,\n          min = _a.min,\n          max = _a.max;\n      return value && DateUtil.sameDay(date, value) || min && date.getTime() < min.setHours(0, 0, 0, 0) || max && date.getTime() > max.setHours(0, 0, 0, 0);\n    };\n\n    _this.yearIndexValid = function (index) {\n      var yearIndex = _this.state.yearIndex;\n      return index <= yearIndex + 2 && index >= yearIndex - 2;\n    };\n\n    _this.monthIndexValid = function (index) {\n      var _a = _this.state,\n          month = _a.month,\n          year = _a.year;\n      var currentIndex = year * 12 + month;\n      return index <= currentIndex + 2 && index >= currentIndex - 2;\n    };\n\n    _this.generateYearCalendar = function (index) {\n      var years = [];\n      var counter = 0;\n\n      for (var year = index * 18; year < (index + 1) * 18; year++) {\n        if (!years[Math.floor(counter / 3)]) {\n          years[Math.floor(counter / 3)] = [year];\n        } else {\n          years[Math.floor(counter / 3)] = years[Math.floor(counter / 3)].concat([year]);\n        }\n\n        counter++;\n      }\n\n      return years;\n    };\n\n    _this.generateMonthCalendar = function (index) {\n      var calendarFocus = {\n        year: Math.floor(index / 12),\n        month: index % 12\n      };\n      var firstDay = new Date(calendarFocus.year, calendarFocus.month, 1);\n      var daysInWeekInMonth = [Array(firstDay.getDay()).fill(undefined)];\n      var counter = firstDay.getDay();\n\n      for (var day = firstDay; day.getMonth() === calendarFocus.month; day = new Date(day.getFullYear(), day.getMonth(), day.getDate() + 1)) {\n        if (!daysInWeekInMonth[Math.floor(counter / 7)]) {\n          daysInWeekInMonth[Math.floor(counter / 7)] = [new Date(day.getFullYear(), day.getMonth(), day.getDate())];\n        } else {\n          daysInWeekInMonth[Math.floor(counter / 7)] = daysInWeekInMonth[Math.floor(counter / 7)].concat([new Date(day.getFullYear(), day.getMonth(), day.getDate())]);\n        }\n\n        counter++;\n      }\n\n      for (var day = 6; !daysInWeekInMonth[daysInWeekInMonth.length - 1][day]; day--) {\n        daysInWeekInMonth[daysInWeekInMonth.length - 1][day] = undefined;\n      }\n\n      return daysInWeekInMonth;\n    };\n\n    var now = new Date();\n    var date = new Date(now.getTime());\n    var min = props.min,\n        max = props.max;\n\n    if (max && now.getTime() > max.getTime()) {\n      date = new Date(max.getTime());\n    } else if (min && now.getTime() < min.getTime()) {\n      date = new Date(min.getTime());\n    }\n\n    if (props.action) {\n      props.action({\n        resize: _this.resize\n      });\n    }\n\n    _this.state = {\n      mode: 'month',\n      selected: props.value,\n      month: date.getMonth(),\n      year: date.getFullYear(),\n      yearIndex: Math.floor(date.getFullYear() / 18),\n      buttonHeight: _this.getButtonHeight()\n    };\n    return _this;\n  }\n\n  Calendar.prototype.componentDidMount = function () {\n    if (!this.props.action) this.resize();\n    window.addEventListener('resize', this.resize);\n    var value = this.props.value;\n\n    if (value) {\n      this.setState({\n        month: value.getMonth(),\n        year: value.getFullYear()\n      });\n    }\n  };\n\n  Calendar.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.resize);\n  };\n\n  Calendar.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        classes = _a.classes,\n        value = _a.value,\n        closeCalendar = _a.closeCalendar,\n        dateDisabled = _a.dateDisabled,\n        okToConfirm = _a.okToConfirm;\n    var _b = this.state,\n        mode = _b.mode,\n        buttonHeight = _b.buttonHeight,\n        selected = _b.selected,\n        year = _b.year,\n        month = _b.month,\n        yearIndex = _b.yearIndex;\n    var active = okToConfirm ? selected : value;\n    return React.createElement(\"div\", {\n      ref: function (container) {\n        return _this.container = container;\n      },\n      className: classes.root\n    }, mode === 'month' ? [React.createElement(\"div\", {\n      className: classes.calendarControl,\n      key: 'calendar-month-control'\n    }, React.createElement(IconButton, {\n      classes: {\n        root: classes.calendarControlButton\n      },\n      disabled: !this.previousMonthValid(),\n      onClick: this.previousMonth\n    }, React.createElement(ChevronLeft, null)), React.createElement(IconButton, {\n      classes: {\n        root: classes.calendarControlButton\n      },\n      disabled: !this.nextMonthValid(),\n      onClick: this.nextMonth\n    }, React.createElement(ChevronRight, null))), React.createElement(VirtualizedSwipeableViews, {\n      key: 'calendar-month-swipeable',\n      action: function (actions) {\n        return _this.updateHeight.year = actions.updateHeight;\n      },\n      className: classes.calendarContainer,\n      index: year * 12 + month,\n      animateHeight: true,\n      onChangeIndex: this.changeMonth,\n      slideRenderer: function (_a) {\n        var index = _a.index;\n        return _this.monthIndexValid(index) ? React.createElement(\"div\", {\n          key: index,\n          className: classes.calendarContainer\n        }, React.createElement(\"div\", {\n          className: classes.calendarControlMonth\n        }, React.createElement(Button, {\n          onClick: _this.showYearsCalendar,\n          classes: {\n            root: classes.calendarMonthTitle\n          }\n        }, DateUtil.month[index % 12].long + ', ' + Math.floor(index / 12))), React.createElement(\"div\", {\n          className: classes.week\n        }, ['S', 'M', 'T', 'W', 'T', 'F', 'S'].map(function (day, index) {\n          return React.createElement(Typography, {\n            key: 'weeklabel-' + index,\n            className: classes.labelWeekDay,\n            variant: 'body1',\n            style: {\n              height: buttonHeight,\n              lineHeight: buttonHeight + \"px\"\n            }\n          }, day);\n        })), _this.generateMonthCalendar(index).map(function (week, index) {\n          return React.createElement(\"div\", {\n            className: classes.week,\n            key: 'week-' + index\n          }, week.map(function (date, index) {\n            var _a, _b;\n\n            return date ? React.createElement(IconButton, {\n              classes: {\n                root: classnames(classes.day, (_a = {}, _a[classes.selectedDay] = active && DateUtil.sameDay(date, active), _a), classes.weekDay)\n              },\n              disabled: _this.dayInvalid(date) || dateDisabled && dateDisabled(date),\n              onClick: function (event) {\n                return _this.selectDate(date, event);\n              },\n              key: 'day-' + index,\n              style: {\n                height: buttonHeight - 10\n              }\n            }, React.createElement(Typography, {\n              classes: {\n                root: classnames(classes.dayText, (_b = {}, _b[classes.selectedDayText] = active && DateUtil.sameDay(date, active), _b[classes.invalidInput] = _this.dayInvalid(date) || dateDisabled && dateDisabled(date), _b))\n              },\n              variant: 'body1',\n              style: {\n                height: buttonHeight - 10,\n                lineHeight: buttonHeight - 10 + \"px\"\n              }\n            }, date.getDate())) : React.createElement(\"div\", {\n              className: classes.weekDay,\n              style: {\n                height: buttonHeight - 10\n              },\n              key: 'day-' + index\n            });\n          }));\n        })) : React.createElement(\"div\", {\n          key: index\n        });\n      }\n    }), okToConfirm && React.createElement(\"div\", {\n      className: classes.okToConfirmRow,\n      key: 'calendar-confirm-button'\n    }, React.createElement(Button, {\n      onClick: closeCalendar\n    }, \"CANCEL\"), React.createElement(Button, {\n      onClick: function (event) {\n        return _this.confirmDate(event);\n      }\n    }, \"OK\"))] : mode === 'year' ? [React.createElement(\"div\", {\n      className: classes.calendarControl,\n      key: 'calendar-year-control'\n    }, React.createElement(IconButton, {\n      classes: {\n        root: classes.calendarControlButton\n      },\n      disabled: !this.previousYearsValid(),\n      onClick: this.previousYears\n    }, React.createElement(ChevronLeft, null)), React.createElement(IconButton, {\n      classes: {\n        root: classes.calendarControlButton\n      },\n      disabled: !this.nextYearsValid(),\n      onClick: this.nextYears\n    }, React.createElement(ChevronRight, null))), React.createElement(VirtualizedSwipeableViews, {\n      key: 'calendar-year-swipeable',\n      action: function (actions) {\n        return _this.updateHeight.year = actions.updateHeight;\n      },\n      className: classes.calendarContainer,\n      index: yearIndex,\n      animateHeight: true,\n      onChangeIndex: this.changeYears,\n      slideRenderer: function (_a) {\n        var index = _a.index;\n        return _this.yearIndexValid(index) ? React.createElement(\"div\", {\n          key: index\n        }, React.createElement(\"div\", {\n          className: classes.calendarControlMonth\n        }, React.createElement(Button, {\n          onClick: function () {\n            return _this.selectCalendarYear();\n          },\n          classes: {\n            root: classes.calendarMonthTitle\n          }\n        }, index * 18 + ' - ' + (index * 18 + 17))), React.createElement(\"div\", {\n          className: classes.calendarContainer\n        }, _this.generateYearCalendar(index).map(function (years, index) {\n          return React.createElement(\"div\", {\n            className: classes.years,\n            key: 'years-' + index\n          }, years.map(function (currentYear, index) {\n            var _a, _b;\n\n            return React.createElement(Button, {\n              className: classnames((_a = {}, _a[classes.selectedYear] = year === currentYear, _a)),\n              variant: year === currentYear ? 'contained' : 'text',\n              disabled: _this.yearInvalid(currentYear),\n              onClick: function () {\n                return _this.selectCalendarYear(currentYear);\n              },\n              key: 'year-' + index\n            }, React.createElement(Typography, {\n              className: classnames((_b = {}, _b[classes.invalidInput] = _this.yearInvalid(currentYear), _b[classes.selectedYearText] = year === currentYear, _b)),\n              variant: 'body1'\n            }, currentYear));\n          }));\n        }))) : React.createElement(\"div\", {\n          key: index\n        });\n      }\n    })] : []);\n  };\n\n  Calendar = __decorate([withStyles(styles)], Calendar);\n  return Calendar;\n}(React.Component);\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}