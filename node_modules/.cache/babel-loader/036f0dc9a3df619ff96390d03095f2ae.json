{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Dialog from '@material-ui/core/Dialog';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Today from '@material-ui/icons/Today';\nimport * as DateUtil from './date';\nimport Calendar from './calendar';\n\nvar styles = function (theme) {\n  return {\n    container: {\n      width: '100%'\n    },\n    label: {\n      maxWidth: '100%',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    formControl: {\n      cursor: 'pointer'\n    },\n    input: {\n      minWidth: '180px',\n      flexGrow: 1,\n      maxWidth: '100%',\n      height: '19px',\n      padding: '6px 0 7px',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    outlinedInput: {\n      padding: '18.5px 14px'\n    },\n    filledInput: {\n      padding: '27px 12px 10px'\n    }\n  };\n};\n\nvar DateFormatInput =\n/** @class */\nfunction (_super) {\n  __extends(DateFormatInput, _super);\n\n  function DateFormatInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.action = {};\n\n    _this.labelRef = function (label) {\n      var labelDOM = ReactDOM.findDOMNode(label);\n\n      if (labelDOM && labelDOM.offsetWidth) {\n        _this.setState({\n          labelWidth: labelDOM.offsetWidth\n        });\n      }\n    };\n\n    _this.onPopoverAction = function (actions) {\n      _this.setState({\n        updateCalendarPosition: actions.updatePosition\n      });\n    };\n\n    _this.onWindowClick = function (event) {\n      if ([_this.input, _this.calendar].reduce(function (contain, next) {\n        return contain && (!next || next.compareDocumentPosition(event.target) < 16);\n      }, true)) {\n        _this.closeCalendar();\n      }\n    };\n\n    _this.onFocus = function (event) {\n      _this.setState({\n        focus: event.type === 'focus'\n      });\n    };\n\n    _this.toggleShowCalendar = function () {\n      var disabled = _this.props.disabled;\n      var calendarShow = _this.state.calendarShow;\n\n      _this.setState({\n        calendarShow: !disabled && !calendarShow\n      });\n    };\n\n    _this.closeCalendar = function () {\n      _this.setState({\n        calendarShow: false\n      });\n    };\n\n    _this.dateValue = function (date) {\n      var dateFormat = _this.props.dateFormat;\n\n      if (typeof dateFormat === 'string') {\n        return DateUtil.format(date, dateFormat);\n      } else if (typeof dateFormat === 'function') {\n        return dateFormat(date);\n      } else {\n        return DateUtil.format(date, 'EEE, MMMM d, yyyy');\n      }\n    };\n\n    var now = new Date();\n    var date = new Date(now.getTime());\n    var min = props.min,\n        max = props.max;\n\n    if (max && now.getTime() > max.getTime()) {\n      date = new Date(max.getTime());\n    } else if (min && now.getTime() < min.getTime()) {\n      date = new Date(min.getTime());\n    }\n\n    _this.state = {\n      focus: false,\n      labelWidth: 0,\n      calendarShow: false,\n      updateCalendarPosition: undefined\n    };\n    return _this;\n  }\n\n  DateFormatInput.prototype.componentDidMount = function () {\n    window.addEventListener('click', this.onWindowClick);\n  };\n\n  DateFormatInput.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if ((prevProps.value && prevProps.value.getTime()) !== (this.props.value && this.props.value.getTime()) && prevState.calendarShow) {\n      this.closeCalendar();\n    }\n  };\n\n  DateFormatInput.prototype.componentWillUnmount = function () {\n    window.removeEventListener('click', this.onWindowClick);\n  };\n\n  DateFormatInput.prototype.render = function () {\n    var _this = this;\n\n    var _a;\n\n    var _b = this.props,\n        name = _b.name,\n        label = _b.label,\n        value = _b.value,\n        variant = _b.variant,\n        onChange = _b.onChange,\n        anchorOrigin = _b.anchorOrigin,\n        transformOrigin = _b.transformOrigin,\n        disabled = _b.disabled,\n        error = _b.error,\n        fullWidth = _b.fullWidth,\n        dateDisabled = _b.dateDisabled,\n        min = _b.min,\n        max = _b.max,\n        dialog = _b.dialog,\n        okToConfirm = _b.okToConfirm,\n        endIcon = _b.endIcon,\n        className = _b.className,\n        FormControlProps = _b.FormControlProps,\n        InputLabelProps = _b.InputLabelProps,\n        InputProps = _b.InputProps,\n        FormHelperTextProps = _b.FormHelperTextProps,\n        CalendarProps = _b.CalendarProps,\n        classes = _b.classes;\n    var _c = this.state,\n        focus = _c.focus,\n        labelWidth = _c.labelWidth,\n        calendarShow = _c.calendarShow,\n        updateCalendarPosition = _c.updateCalendarPosition;\n\n    var calendarProps = __assign({\n      ref: function (calendar) {\n        return _this.calendar = ReactDOM.findDOMNode(calendar);\n      },\n      value: value,\n      onChange: onChange,\n      dateDisabled: dateDisabled,\n      min: min,\n      max: max,\n      closeCalendar: this.closeCalendar,\n      okToConfirm: okToConfirm\n    }, CalendarProps);\n\n    var SelectedInput = variant === 'outlined' ? OutlinedInput : variant === 'filled' ? FilledInput : Input;\n    return [React.createElement(\"div\", {\n      key: 'date-input',\n      className: classnames((_a = {}, _a[classes.container] = fullWidth, _a), className),\n      ref: function (input) {\n        return _this.input = input;\n      }\n    }, React.createElement(FormControl, __assign({\n      disabled: disabled,\n      onClick: this.toggleShowCalendar,\n      error: error !== undefined,\n      fullWidth: fullWidth,\n      variant: variant\n    }, __assign({}, FormControlProps, {\n      classes: FormControlProps && FormControlProps.classes ? __assign({\n        root: classes.formControl\n      }, FormControlProps.classes) : {\n        root: classes.formControl\n      }\n    })), label && React.createElement(InputLabel, __assign({}, {\n      ref: this.labelRef\n    }, {\n      shrink: focus || calendarShow || value !== undefined,\n      htmlFor: name\n    }, __assign({}, InputLabelProps, {\n      classes: InputLabelProps && InputLabelProps.classes ? __assign({\n        root: classes.label\n      }, InputLabelProps.classes) : {\n        root: classes.label\n      }\n    })), label), React.createElement(SelectedInput, __assign({\n      name: name,\n      value: value ? this.dateValue(value) : '\\u00a0'\n    }, variant === 'outlined' ? {\n      notched: focus || calendarShow || value !== undefined,\n      labelWidth: labelWidth\n    } : {}, {\n      onFocus: this.onFocus,\n      onBlur: this.onFocus,\n      inputComponent: function (_a) {\n        var value = _a.value;\n\n        var _b;\n\n        return React.createElement(\"div\", {\n          className: classnames(classes.input, (_b = {}, _b[classes.outlinedInput] = variant === 'outlined', _b[classes.filledInput] = variant === 'filled', _b))\n        }, value);\n      },\n      endAdornment: React.createElement(InputAdornment, {\n        position: 'end'\n      }, React.createElement(IconButton, {\n        disabled: disabled,\n        onMouseDown: function (event) {\n          return event.preventDefault();\n        }\n      }, endIcon ? endIcon : React.createElement(Today, null)))\n    }, InputProps)), error && React.createElement(FormHelperText, __assign({\n      error: true\n    }, FormHelperTextProps), error))), dialog ? React.createElement(Dialog, {\n      key: 'date-dialog',\n      open: calendarShow,\n      onClose: this.closeCalendar\n    }, React.createElement(Calendar, __assign({}, calendarProps))) : React.createElement(Popover, {\n      key: 'date-popover',\n      action: function (actions) {\n        return _this.onPopoverAction(actions);\n      },\n      onEntered: function () {\n        if (_this.action.resize) _this.action.resize();\n      },\n      open: calendarShow,\n      anchorOrigin: anchorOrigin,\n      transformOrigin: transformOrigin,\n      anchorEl: this.input\n    }, React.createElement(Calendar, __assign({\n      action: function (action) {\n        return _this.action.resize = action.resize;\n      },\n      onUpdateSize: updateCalendarPosition\n    }, calendarProps)))];\n  };\n\n  DateFormatInput = __decorate([withStyles(styles)], DateFormatInput);\n  return DateFormatInput;\n}(React.Component);\n\nexport default DateFormatInput;","map":null,"metadata":{},"sourceType":"module"}