{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport * as DateUtil from './date';\nvar defaultTime = new Date(1970, 1, 1);\n\nvar styles = function (theme) {\n  return {\n    clockDigitalContainer: {\n      padding: '16px 16px 8px',\n      display: 'flex',\n      justifyContent: 'stretch',\n      userSelect: 'none'\n    },\n    clockDigitContainer: {\n      flex: '1 1',\n      display: 'flex'\n    },\n    hourDigitContainer: {\n      justifyContent: 'flex-end'\n    },\n    miniteDigitContainer: {\n      justifyContent: 'flex-start'\n    },\n    digitText: {\n      width: '62px',\n      cursor: 'pointer',\n      '&:active': {\n        opacity: 0.7\n      }\n    },\n    hourDigitText: {\n      textAlign: 'right'\n    },\n    colonDigit: {\n      width: '18px',\n      textAlign: 'left'\n    },\n    ampmButtons: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    ampmButton: {\n      minWidth: 'initial',\n      minHeight: 'initial',\n      padding: '4px 8px'\n    },\n    clockAnalogContainer: {\n      padding: '16px 24px 24px'\n    },\n    clockBackground: {\n      width: '230px',\n      height: '230px',\n      maxWidth: 'calc(100vw - 112px)',\n      maxHeight: 'calc(100vw - 112px)',\n      borderRadius: '115px',\n      position: 'relative',\n      background: theme.palette.background.default,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      cursor: 'pointer'\n    },\n    clockText: {\n      position: 'absolute',\n      userSelect: 'none',\n      height: '16px',\n      width: '16px',\n      lineHeight: '16px',\n      textAlign: 'center'\n    },\n    clockTextSelected: {\n      color: theme.palette.primary.contrastText\n    },\n    clockTextFaded: {\n      opacity: 0,\n      pointerEvents: 'none'\n    },\n    minuteDot: {\n      position: 'absolute',\n      height: '6px',\n      width: '6px',\n      borderRadius: '3px'\n    },\n    minuteDotSelected: {\n      backgroundColor: theme.palette.primary.contrastText\n    },\n    clockHandContainer: {\n      position: 'absolute',\n      width: '2px'\n    },\n    clockHand: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      backgroundColor: theme.palette.primary.main\n    },\n    clockHandHead: {\n      position: 'absolute',\n      left: '-20px',\n      top: '-21px',\n      width: '42px',\n      height: '42px',\n      borderRadius: '21px',\n      backgroundColor: theme.palette.primary.main\n    },\n    clockHandTail: {\n      position: 'absolute',\n      left: '-3px',\n      bottom: '-4px',\n      width: '8px',\n      height: '8px',\n      borderRadius: '4px',\n      backgroundColor: theme.palette.primary.main\n    },\n    okToConfirmRow: {\n      height: '48px',\n      marginTop: '-8px',\n      padding: '0 6px',\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center'\n    }\n  };\n};\n\nvar Clock =\n/** @class */\nfunction (_super) {\n  __extends(Clock, _super);\n\n  function Clock(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.setClockRadius = function () {\n      _this.setState({\n        clockRadius: _this.getClockRadius()\n      });\n    };\n\n    _this.getClockRadius = function () {\n      var background = _this.clockface ? _this.clockface.getBoundingClientRect().width : 230;\n      return background / 2 - 28;\n    };\n\n    _this.getValue = function (options, target, origin) {\n      var radian = Math.atan2(target.y - origin.y, target.x - origin.x);\n      var angle = radian + Math.PI / 6 * 3 < 0 ? radian + Math.PI / 6 * 15 : radian + Math.PI / 6 * 3;\n      var select = Math.round(angle / 2 / Math.PI * options.length);\n      var selected = options.map(function (option, index) {\n        return {\n          option: option,\n          distance: Math.min.apply(Math, [index, index + options.length].map(function (index) {\n            return Math.abs(index - select);\n          }))\n        };\n      }).filter(function (select) {\n        return select.option !== undefined;\n      }).reduce(function (selected, option) {\n        return selected && selected.distance < option.distance ? selected : option;\n      }, undefined);\n      return selected && selected.option;\n    };\n\n    _this.getOriginPoint = function () {\n      var clockface = _this.clockface.getBoundingClientRect();\n\n      return {\n        x: clockface.left + clockface.width / 2,\n        y: clockface.top + clockface.height / 2\n      };\n    };\n\n    _this.getMouseTargetPoint = function (event) {\n      var mouse = event.nativeEvent;\n      return {\n        x: mouse.pageX,\n        y: mouse.pageY\n      };\n    };\n\n    _this.getTouchTargetPoint = function (event) {\n      var touch = event.nativeEvent.touches[event.nativeEvent.touches.length - 1];\n      return {\n        x: touch.pageX,\n        y: touch.pageY\n      };\n    };\n\n    _this.changeValue = function (label, selecting, event) {\n      var _a = _this.props,\n          value = _a.value,\n          onChange = _a.onChange,\n          okToConfirm = _a.okToConfirm;\n      var selected = _this.state.selected;\n      var date = new Date((okToConfirm ? selected : value) || defaultTime);\n\n      if (selecting >= 0 && label === 'hour') {\n        date.setHours(selecting + (value && value.getHours() >= 12 ? 12 : 0));\n      } else if (selecting >= 0 && label === 'minute') {\n        date.setMinutes(selecting);\n      }\n\n      if (selecting >= 0 && okToConfirm) {\n        _this.setState({\n          selecting: true,\n          selected: date\n        });\n      } else if (selecting >= 0) {\n        _this.setState({\n          selecting: true\n        }, function () {\n          return onChange(date, event);\n        });\n      }\n    };\n\n    _this.mouseSelectClock = function (event, label, options) {\n      event.preventDefault();\n\n      var selected = _this.getValue(options, _this.getMouseTargetPoint(event), _this.getOriginPoint());\n\n      _this.setState({\n        selecting: true\n      }, function () {\n        return _this.changeValue(label, selected, event);\n      });\n    };\n\n    _this.touchSelectClock = function (event, label, options) {\n      event.preventDefault();\n\n      var selected = _this.getValue(options, _this.getTouchTargetPoint(event), _this.getOriginPoint());\n\n      _this.setState({\n        selecting: true\n      }, function () {\n        return _this.changeValue(label, selected, event);\n      });\n    };\n\n    _this.mouseHoverClock = function (event, label, options) {\n      event.preventDefault();\n      var selecting = _this.state.selecting;\n\n      var selected = _this.getValue(options, _this.getMouseTargetPoint(event), _this.getOriginPoint());\n\n      if (selecting && selected !== undefined) {\n        _this.changeValue(label, selected, event);\n      }\n    };\n\n    _this.touchHoverClock = function (event, label, options) {\n      event.preventDefault();\n      var touch = event.nativeEvent.touches[event.nativeEvent.touches.length - 1];\n      var target = {\n        x: touch.pageX,\n        y: touch.pageY\n      };\n\n      var selected = _this.getValue(options, _this.getTouchTargetPoint(event), _this.getOriginPoint());\n\n      if (selected !== undefined) {\n        _this.changeValue(label, selected, event);\n      }\n    };\n\n    _this.confirmClock = function (event, label) {\n      var _a = _this.props,\n          closeClock = _a.closeClock,\n          okToConfirm = _a.okToConfirm;\n      event.preventDefault();\n\n      if (label === 'hour') {\n        _this.setState({\n          mode: 'minute',\n          selecting: false\n        });\n      } else {\n        _this.setState({\n          selecting: false\n        }, okToConfirm ? undefined : closeClock);\n      }\n    };\n\n    _this.confirmTime = function (event) {\n      var _a = _this.props,\n          onChange = _a.onChange,\n          closeClock = _a.closeClock,\n          okToConfirm = _a.okToConfirm;\n\n      if (okToConfirm) {\n        closeClock();\n        onChange(_this.state.selected, event);\n      }\n    };\n\n    _this.clickSetMode = function (mode) {\n      _this.setState({\n        mode: mode\n      });\n    };\n\n    _this.clickAmPm = function (ampm, event) {\n      var _a = _this.props,\n          value = _a.value,\n          onChange = _a.onChange,\n          okToConfirm = _a.okToConfirm;\n      var selected = _this.state.selected;\n      var date = new Date((okToConfirm ? selected : value) || defaultTime);\n      var hour = date.getHours();\n\n      if (hour >= 12 && ampm === 'am') {\n        date.setHours(hour - 12);\n      } else if (hour < 12 && ampm === 'pm') {\n        date.setHours(hour + 12);\n      }\n\n      if (okToConfirm) {\n        _this.setState({\n          selected: date\n        });\n      } else {\n        onChange(date, event);\n      }\n    };\n\n    _this.getSelectedDate = function () {\n      var _a = _this.props,\n          value = _a.value,\n          okToConfirm = _a.okToConfirm;\n      var selected = _this.state.selected;\n      var selecting = okToConfirm ? selected : value;\n      return selecting ? {\n        hour: selecting.getHours() >= 12 ? selecting.getHours() - 12 : selecting.getHours(),\n        minute: selecting.getMinutes(),\n        ampm: selecting.getHours() >= 12 ? 'pm' : 'am'\n      } : {\n        hour: 0,\n        minute: 0,\n        ampm: 'am'\n      };\n    };\n\n    if (props.action) {\n      props.action({\n        resize: _this.setClockRadius\n      });\n    }\n\n    _this.state = {\n      mode: 'hour',\n      selected: props.value,\n      selecting: false,\n      clockRadius: _this.getClockRadius()\n    };\n    return _this;\n  }\n\n  Clock.prototype.componentDidMount = function () {\n    if (!this.props.action) this.setClockRadius();\n    window.addEventListener('resize', this.setClockRadius);\n  };\n\n  Clock.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.setClockRadius);\n  };\n\n  Clock.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        classes = _a.classes,\n        value = _a.value,\n        okToConfirm = _a.okToConfirm,\n        closeClock = _a.closeClock,\n        selectableMinutesInterval = _a.selectableMinutesInterval;\n    var _b = this.state,\n        mode = _b.mode,\n        selecting = _b.selecting,\n        clockRadius = _b.clockRadius;\n    var hours = Array(12).fill(undefined).map(function (number, index) {\n      return index === 0 ? 12 : index;\n    });\n    var minutes = Array(60).fill(undefined).map(function (number, index) {\n      return !selectableMinutesInterval ? index : index % selectableMinutesInterval === 0 ? index : undefined;\n    });\n    var selected = this.getSelectedDate();\n    var selectAngle = (mode === 'hour' ? selected.hour / hours.length : selected.minute / minutes.length) * 2 * Math.PI - Math.PI / 6 * 3;\n    return React.createElement(\"div\", {\n      className: classes.root\n    }, React.createElement(\"div\", {\n      className: classnames(classes.clockDigitalContainer, classes.digitalContainer)\n    }, React.createElement(\"div\", {\n      className: classnames(classes.clockDigitContainer, classes.hourDigitContainer)\n    }, React.createElement(Typography, {\n      color: mode === 'hour' ? 'primary' : 'default',\n      variant: 'h2',\n      classes: {\n        root: classnames(classes.digitText, classes.hourDigitText)\n      },\n      onClick: function () {\n        return _this.clickSetMode('hour');\n      }\n    }, selected.hour === 0 ? 12 : selected.hour)), React.createElement(\"div\", null, React.createElement(Typography, {\n      variant: 'h2',\n      classes: {\n        root: classes.colonDigit\n      }\n    }, \":\")), React.createElement(\"div\", {\n      className: classnames(classes.clockDigitContainer, classes.miniteDigitContainer)\n    }, React.createElement(Typography, {\n      color: mode === 'minute' ? 'primary' : 'default',\n      variant: 'h2',\n      classes: {\n        root: classes.digitText\n      },\n      onClick: function () {\n        return _this.clickSetMode('minute');\n      }\n    }, DateUtil.fillInDigit(selected.minute, 2)), React.createElement(\"div\", {\n      className: classes.ampmButtons\n    }, React.createElement(Button, {\n      color: selected.ampm === 'am' ? 'primary' : 'default',\n      classes: {\n        root: classes.ampmButton\n      },\n      onClick: function (event) {\n        return _this.clickAmPm('am', event);\n      }\n    }, \"AM\"), React.createElement(Button, {\n      color: selected.ampm === 'pm' ? 'primary' : 'default',\n      classes: {\n        root: classes.ampmButton\n      },\n      onClick: function (event) {\n        return _this.clickAmPm('pm', event);\n      }\n    }, \"PM\")))), React.createElement(\"div\", {\n      key: 'clock',\n      className: classes.clockAnalogContainer,\n      onMouseDown: function (event) {\n        return _this.mouseSelectClock(event, mode, mode === 'hour' ? hours : minutes);\n      },\n      onTouchStart: function (event) {\n        return _this.touchSelectClock(event, mode, mode === 'hour' ? hours : minutes);\n      },\n      onMouseMove: function (event) {\n        return _this.mouseHoverClock(event, mode, mode === 'hour' ? hours : minutes);\n      },\n      onTouchMove: function (event) {\n        return _this.touchHoverClock(event, mode, mode === 'hour' ? hours : minutes);\n      },\n      onMouseUp: function (event) {\n        return _this.confirmClock(event, mode);\n      },\n      onTouchEnd: function (event) {\n        return _this.confirmClock(event, mode);\n      }\n    }, React.createElement(\"div\", {\n      className: classes.clockBackground,\n      ref: function (clockface) {\n        return _this.clockface = clockface;\n      }\n    }, React.createElement(\"div\", {\n      className: classes.clockHandContainer,\n      style: {\n        height: clockRadius,\n        paddingBottom: clockRadius,\n        transition: selecting ? '' : 'transform 600ms ease-in-out',\n        transform: \"rotate(\" + (selectAngle + Math.PI / 6 * 3) + \"rad)\"\n      }\n    }, React.createElement(\"div\", {\n      className: classnames(classes.clockHand, classes.hand)\n    }, React.createElement(\"div\", {\n      className: classes.clockHandHead\n    }), React.createElement(\"div\", {\n      className: classes.clockHandTail\n    }))), hours.map(function (hour, index) {\n      var _a, _b;\n\n      var angle = index / hours.length * 2 * Math.PI - Math.PI / 6 * 3;\n      return React.createElement(Typography, {\n        key: hour,\n        className: classnames(classes.clockText, (_a = {}, _a[classes.clockTextSelected] = mode === 'hour' && selected.hour === index, _a), (_b = {}, _b[classes.clockTextFaded] = mode !== 'hour', _b)),\n        style: {\n          transition: selecting ? 'opacity 600ms ease-in-out' : 'opacity 600ms ease-in-out, color 0ms 600ms',\n          transform: \"translate(\" + clockRadius * Math.cos(angle) + \"px, \" + clockRadius * Math.sin(angle) + \"px)\"\n        }\n      }, hour);\n    }), minutes.map(function (minute, index) {\n      var _a, _b, _c, _d;\n\n      var angle = index / minutes.length * 2 * Math.PI - Math.PI / 6 * 3;\n\n      if (minute % 5 === 0) {\n        return React.createElement(Typography, {\n          key: index,\n          className: classnames(classes.clockText, (_a = {}, _a[classes.clockTextSelected + \" \" + classes.textSelected] = mode === 'minute' && selected.minute === index, _a), (_b = {}, _b[classes.clockTextFaded] = mode !== 'minute', _b)),\n          style: {\n            transition: selecting ? 'opacity 600ms ease-in-out' : 'opacity 600ms ease-in-out, color 0ms 600ms',\n            transform: \"translate(\" + clockRadius * Math.cos(angle) + \"px, \" + clockRadius * Math.sin(angle) + \"px)\"\n          }\n        }, minute);\n      } else {\n        return React.createElement(\"div\", {\n          key: index,\n          className: classnames(classes.minuteDot, (_c = {}, _c[classes.minuteDotSelected] = mode === 'minute' && selected.minute === minute, _c), (_d = {}, _d[classes.clockTextFaded] = mode !== 'minute', _d)),\n          style: {\n            transition: selecting ? 'opacity 600ms ease-in-out' : 'opacity 600ms ease-in-out, background 0ms 600ms',\n            transform: \"translate(\" + clockRadius * Math.cos(angle) + \"px, \" + clockRadius * Math.sin(angle) + \"px)\"\n          }\n        });\n      }\n    }))), okToConfirm && React.createElement(\"div\", {\n      className: classes.okToConfirmRow\n    }, React.createElement(Button, {\n      onClick: closeClock\n    }, \"CANCEL\"), React.createElement(Button, {\n      onClick: function (event) {\n        return _this.confirmTime(event);\n      }\n    }, \"OK\")));\n  };\n\n  Clock = __decorate([withStyles(styles)], Clock);\n  return Clock;\n}(React.Component);\n\nexport default Clock;","map":null,"metadata":{},"sourceType":"module"}